@using WebApp.Models.View.Tag
@using WebApp.Models.View.Tag.Base
@model List<TagViewModel>
@Html.AntiForgeryToken()
@{
    var selectorModel = new WebApp.Models.View.SelectorViewModel()
            {
                Items = Model
            };
}
@section _AsideRight {
       @await Html.PartialAsync("_TagCreate", new WebApp.Models.View.Tag.Base.TagBase())
        
}

@if (Model.Any())
{
    <div class="table-wrap material">
        <div class="table-header">
            <h2 class="table-title">
                <span class="icon">🏷️</span>
                Список тегов
            </h2>
        </div>

        <table class="tag-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Название</th>
                    <th>Описание</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tag in Model)
                {
                    <tr data-id="@tag.Id" class="tag-row">
                        <td>
                            <div class="tag-id">#@tag.Id</div>
                        </td>
                        <td class="editable" data-field="Name">
                            <div class="tag-name view-mode">@tag.Name</div>
                            <input type="text" class="edit-mode form-control" value="@tag.Name" style="display:none;" />
                        </td>
                        <td class="editable" data-field="Description">
                            <div class="tag-desc view-mode">@tag.Description</div>
                            <input type="text" class="edit-mode form-control" value="@tag.Description" style="display:none;" />
                        </td>
                        <td>
                            <div class="action-buttons">
                                @if (User.IsInRole("Administrator") || User.IsInRole("Moderator"))
                                {
                                    <button class="btn btn-edit text-primary p-0" title="Редактировать"
                                            onclick="toggleEdit(this)">
                                        <i class="fa-solid fa-pen"></i>
                                    </button>
                                    
                                    <button class="btn btn-save text-success p-0" title="Сохранить" 
                                            style="display:none;"
                                            onclick="saveTag('@tag.Id', this)">
                                        <i class="fa-solid fa-check"></i>
                                    </button>
                                    
                                    <button class="btn btn-cancel text-secondary p-0" title="Отменить" 
                                            style="display:none;"
                                            onclick="cancelEdit(this)">
                                        <i class="fa-solid fa-times"></i>
                                    </button>

                                    @if (User.IsInRole("Administrator"))
                                    {
                                        <form asp-controller="Tag" asp-action="Delete" asp-route-id="@tag.Id" method="post"
                                              onsubmit="return confirm('Удалить тег @tag.Name?');">
                                            <button type="submit" class="btn btn-sm btn-link text-danger p-0" title="Удалить">
                                                <i class="fa-solid fa-trash"></i>
                                            </button>
                                        </form>
                                    }
                                }
                                else
                                {
                                    <i class="fa-solid fa-shield"></i>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<script>
function toggleEdit(button) {
    const row = button.closest('tr');
    const viewElements = row.querySelectorAll('.view-mode');
    const editElements = row.querySelectorAll('.edit-mode');
    const editBtn = row.querySelector('.btn-edit');
    const saveBtn = row.querySelector('.btn-save');
    const cancelBtn = row.querySelector('.btn-cancel');

    // Переключаем режимы
    viewElements.forEach(el => el.style.display = 'none');
    editElements.forEach(el => el.style.display = 'block');
    editBtn.style.display = 'none';
    saveBtn.style.display = 'inline-block';
    cancelBtn.style.display = 'inline-block';
}

function cancelEdit(button) {
    const row = button.closest('tr');
    const viewElements = row.querySelectorAll('.view-mode');
    const editElements = row.querySelectorAll('.edit-mode');
    const editBtn = row.querySelector('.btn-edit');
    const saveBtn = row.querySelector('.btn-save');
    const cancelBtn = row.querySelector('.btn-cancel');

    // Возвращаем к исходному состоянию
    viewElements.forEach(el => el.style.display = 'block');
    editElements.forEach(el => el.style.display = 'none');
    editBtn.style.display = 'inline-block';
    saveBtn.style.display = 'none';
    cancelBtn.style.display = 'none';
}

    async function saveTag(tagId, button) {
            console.log("Функция saveTag вызвана, ID:", tagId);
            const row = button.closest('tr');

        // Находим поля
        const nameInput = row.querySelector('td[data-field="Name"] input');
        const descInput = row.querySelector('td[data-field="Description"] input');

        if (!nameInput || !descInput) {
            console.error("Не удалось найти поля ввода в строке для тега ID:", tagId);
            return;
        }

        const tagData = {
            Id: tagId,
            Name: nameInput.value.trim(),
            Description: descInput.value.trim()
        };

        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        if (!token) {
            console.error("Токен CSRF (__RequestVerificationToken) не найден на странице");
            return;
        }

        console.log("=== Сохраняем тег ===");
        console.log("Данные:", tagData);

        try {
            const response = await fetch('/Tag/Edit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify(tagData)
            });

            console.log("Статус ответа:", response.status);

            let resultText = await response.text();
            console.log("Ответ сервера (raw):", resultText);

            let result;
            try {
                result = JSON.parse(resultText);
            } catch {
                console.warn("Не удалось распарсить JSON, ответ в тексте:", resultText);
                result = null;
            }

            if (response.ok && result?.success) {
                // Обновляем данные в строке
                row.querySelector('.tag-name').textContent = tagData.Name;
                row.querySelector('.tag-desc').textContent = tagData.Description;

                cancelEdit(button);
                console.log("Тег успешно обновлён:", tagData);
                alert("Изменения сохранены!");
            } else {
                console.error("Ошибка при сохранении:", result?.message || response.statusText);
                alert(result?.message || "Ошибка при сохранении");
            }
        } catch (error) {
            console.error("Ошибка при отправке запроса:", error);
            alert("Ошибка при сохранении. См. консоль для подробностей.");
        }

        console.log("=== Конец сохранения ===");
    }

</script>
<style>
    .material {
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

        .material .table-header {
            padding: 1.5rem 1.5rem 0;
            border-bottom: 1px solid #f0f0f0;
        }

        .material .table-title {
            margin: 0;
            color: #3f51b5;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .material .tag-table {
            width: 100%;
            border-collapse: collapse;
        }

            .material .tag-table th {
                padding: 1rem 1.5rem;
                text-align: left;
                color: #666;
                font-weight: 500;
                border-bottom: 1px solid #f0f0f0;
            }

        .material .tag-row td {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #fafafa;
        }

        .material .tag-row:hover {
            background: #fafafa;
        }

        .material .tag-id {
            background: #f5f5f5;
            padding: 0.3rem 0.6rem;
            border-radius: 4px;
            font-size: 0.9rem;
            color: #666;
            display: inline-block;
        }

        .material .tag-name {
            font-weight: 500;
            color: #333;
            width: 200px;
        }

        .material .tag-desc {
            color: #666;
            line-height: 1.4;
            width: 200px;
        }

        .material .action-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .material .mdc-btn {
            border: none;
            padding: 0.5rem;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .material .mdc-btn.edit {
                background: #e3f2fd;
                color: #1976d2;
            }

            .material .mdc-btn.delete {
                background: #ffebee;
                color: #d32f2f;
            }

            .material .mdc-btn:hover {
                transform: scale(1.1);
            }

        .material .mdc-icon {
            font-size: 1.1rem;
        }
</style>