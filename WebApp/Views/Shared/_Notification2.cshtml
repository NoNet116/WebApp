<!-- Поместите этот код перед закрывающим тегом </body> -->
<div id="notification" class="notification" style="display: none;" aria-live="polite">
    <div class="notification-content">
        <span id="notification-message"></span>
        <button type="button" onclick="hideNotification()" class="notification-close" aria-label="Закрыть уведомление">&times;</button>
    </div>
</div>

<style>
    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 10000; /* Увеличил для надежности */
        max-width: 350px;
        width: 90%;
        margin: 0 auto;
    }

    .notification-content {
        padding: 15px 20px;
        border-radius: 5px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        display: flex;
        justify-content: space-between;
        align-items: center;
        animation: slideIn 0.3s ease-out forwards;
    }

    .notification-success {
        background-color: #d4edda;
        color: #155724;
        border-left: 5px solid #28a745;
    }

    .notification-error {
        background-color: #f8d7da;
        color: #721c24;
        border-left: 5px solid #dc3545;
    }

    .notification-warning {
        background-color: #fff3cd;
        color: #856404;
        border-left: 5px solid #ffc107;
    }

    .notification-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        margin-left: 15px;
        color: inherit;
        padding: 0;
        line-height: 1;
    }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @@media (max-width: 576px) {
        .notification {
            top: 10px;
            right: 10px;
            left: 10px;
            max-width: none;
        }
    }
</style>

<script>
    // Функция для безопасного декодирования HTML-сущностей
    function decodeHtmlEntities(text) {
        if (!text) return '';
        const textArea = document.createElement('textarea');
        textArea.innerHTML = text;
        return textArea.value;
    }

    // Таймер для автоскрытия
    let notificationTimer;

    function showNotification(message, type = 'success') {
        clearTimeout(notificationTimer);
        const notification = document.getElementById('notification');
        const messageElement = document.getElementById('notification-message');

        if (!notification || !messageElement) return;

        // Сбрасываем классы и устанавливаем новые
        notification.className = 'notification';
        notification.classList.add(`notification-${type}`);

        // Безопасная установка текста
        messageElement.textContent = decodeHtmlEntities(message);
        notification.style.display = 'block';

        // Автоматическое скрытие через 5 секунд
        notificationTimer = setTimeout(hideNotification, 5000);
    }

    function hideNotification() {
        const notification = document.getElementById('notification');
        if (notification) {
            notification.style.display = 'none';
        }
    }

    // Показать уведомление при загрузке страницы
    document.addEventListener('DOMContentLoaded', function() {
    @if (TempData["ToastMessage"] != null)
    {
        @:const message = '@Html.Raw(TempData["ToastMessage"])';
        @:const type = '@TempData["ToastType"]' || 'success';
        @:showNotification(message, type);
    }
    });
</script>